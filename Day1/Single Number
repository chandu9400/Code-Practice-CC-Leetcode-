Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
You must implement a solution with a linear runtime complexity and use only constant extra space.
# code
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        
        if(len(nums) == 1):
            return nums[0]
        
        nums = sorted(nums)
        start = 0
        last = 2
        while(last <= len(nums)-1):
            curr_split = nums[start : last]
            if(curr_split[0] != curr_split[1]):
                return curr_split[0]
            start = start +2
            last = last +2
        return nums[len(nums)-1]
        
